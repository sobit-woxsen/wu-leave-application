generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model BBAStudentData {
  id                  String   @id @default(auto()) @map("_id") @db.ObjectId
  DOB                 DateTime @db.Date
  academicYear        String
  admissionNumber     String
  admissionStatus     String
  country             String
  degree              String
  fatherEmail         String?
  fatherMobileNumber  BigInt?
  fatherName          String
  fullName            String
  gender              String
  motherMobileNumber  BigInt?
  motherName          String
  motherTongue        String
  program             String
  religion            String?
  rollNumber          String
  section             String
  semester            String
  sessionAcademicYear String
  smsPhoneNumber      BigInt?
  studentEmail        String
}

model BCOMStudentData {
  id                  String   @id @default(auto()) @map("_id") @db.ObjectId
  DOB                 DateTime @db.Date
  academicYear        String
  admissionNumber     String
  admissionStatus     String
  country             String
  degree              String
  fatherEmail         String?
  fatherMobileNumber  BigInt
  fatherName          String
  fullName            String
  gender              String
  motherMobileNumber  BigInt?
  motherName          String
  motherTongue        String
  program             String
  religion            String
  rollNumber          String
  section             String
  semester            String
  sessionAcademicYear String
  smsPhoneNumber      BigInt
  studentEmail        String
}

enum ApplicationStatus {
  ACCEPTED
  REJECTED
  PENDING
}

model LeaveApplication {
  id           String            @id @default(auto()) @map("_id") @db.ObjectId
  startDate    DateTime
  endDate      DateTime
  totalLeaves  Int
  leaveReason  String
  leaveType    String
  documentUrl  String?
  videoUrl     String?
  studentEmail String?
  department   Department
  status       ApplicationStatus @default(PENDING)
  userId       String            @db.ObjectId
  user         User              @relation(fields: [userId], references: [id])
  createdAt    DateTime          @default(now()) @db.Date
  updatedAt    DateTime          @updatedAt @db.Date
}

model OTPVerify {
  id        String   @id @map("_id")
  createdAt DateTime @db.Date
  expiresAt DateTime @db.Date
  otp       BigInt
  studentId String   @unique @db.ObjectId
}

model User {
  id               String             @id @default(auto()) @map("_id") @db.ObjectId
  department       String
  password         String
  role             Role               @default(USER)
  studentEmail     String             @unique
  createdAt        DateTime           @default(now()) @db.Date
  updatedAt        DateTime           @updatedAt @db.Date
  LeaveApplication LeaveApplication[]
}

model bbastudentdatas {
  id                  String   @id @default(auto()) @map("_id") @db.ObjectId
  DOB                 DateTime @db.Date
  v                   Int      @map("__v")
  academicYear        String
  admissionNumber     String
  admissionStatus     String
  country             String
  degree              String
  fatherEmail         String?
  /// Multiple data types found: Float: 99.2%, Int: 0.8% out of 376 sampled entries
  fatherMobileNumber  Json?
  fatherName          String
  fullName            String
  gender              String
  /// Multiple data types found: Float: 97.8%, Int: 2.2% out of 372 sampled entries
  motherMobileNumber  Json?
  motherName          String
  motherTongue        String
  program             String
  religion            String?
  rollNumber          String
  section             String
  semester            String
  sessionAcademicYear String
  /// Multiple data types found: Float: 99.2%, Int: 0.8% out of 376 sampled entries
  smsPhoneNumber      Json?
  studentEmail        String
}

model bcomstudentdatas {
  id                  String   @id @default(auto()) @map("_id") @db.ObjectId
  DOB                 DateTime @db.Date
  v                   Int      @map("__v")
  academicYear        String
  admissionNumber     String
  admissionStatus     String
  country             String
  degree              String
  fatherEmail         String?
  fatherMobileNumber  Float
  fatherName          String
  fullName            String
  gender              String
  /// Multiple data types found: Float: 30.8%, Int: 69.2% out of 13 sampled entries
  motherMobileNumber  Json?
  motherName          String
  motherTongue        String
  program             String
  religion            String
  rollNumber          String
  section             String
  semester            String
  sessionAcademicYear String
  smsPhoneNumber      Float
  studentEmail        String
}

enum Role {
  ADMIN
  USER
}

enum Department {
  BBA
  BCOM
}

model Admin {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  adminEmail String
  password   String
  role       Role        @default(ADMIN)
  department Department?
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  @@map("AdminSchema")
}
